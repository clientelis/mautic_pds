<?php

namespace Proxies\__CG__\Mautic\CampaignBundle\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Campaign extends \Mautic\CampaignBundle\Entity\Campaign implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
  'deleted' => NULL,
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
  'deleted' => NULL,
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {
        unset($this->deleted);

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * 
     * @param string $name
     */
    public function __get($name)
    {
        if (\array_key_exists($name, self::$lazyPropertiesNames)) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);
            return $this->$name;
        }

        trigger_error(sprintf('Undefined property: %s::$%s', __CLASS__, $name), E_USER_NOTICE);

    }

    /**
     * 
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        if (\array_key_exists($name, self::$lazyPropertiesNames)) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

            $this->$name = $value;

            return;
        }

        $this->$name = $value;
    }

    /**
     * 
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        if (\array_key_exists($name, self::$lazyPropertiesNames)) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', [$name]);

            return isset($this->$name);
        }

        return false;
    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'id', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'name', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'description', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'publishUp', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'publishDown', 'deleted', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'category', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'events', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'leads', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'lists', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'forms', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'canvasSettings', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'allowRestart', 'changes', 'new', 'deletedId', 'pastChanges', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'version', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'currentVersion', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'incrementVersion'];
        }

        return ['__isInitialized__', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'id', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'name', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'description', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'publishUp', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'publishDown', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'category', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'events', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'leads', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'lists', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'forms', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'canvasSettings', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'allowRestart', 'changes', 'new', 'deletedId', 'pastChanges', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'version', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'currentVersion', '' . "\0" . 'Mautic\\CampaignBundle\\Entity\\Campaign' . "\0" . 'incrementVersion'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Campaign $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

            unset($this->deleted);
        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function convertToArray(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'convertToArray', []);

        return parent::convertToArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function addEvents(array $events)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEvents', [$events]);

        return parent::addEvents($events);
    }

    /**
     * {@inheritDoc}
     */
    public function addEvent($key, \Mautic\CampaignBundle\Entity\Event $event)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEvent', [$key, $event]);

        return parent::addEvent($key, $event);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEvent(\Mautic\CampaignBundle\Entity\Event $event): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEvent', [$event]);

        parent::removeEvent($event);
    }

    /**
     * {@inheritDoc}
     */
    public function getEvents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvents', []);

        return parent::getEvents();
    }

    /**
     * {@inheritDoc}
     */
    public function getRootEvents(): \Doctrine\Common\Collections\ArrayCollection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRootEvents', []);

        return parent::getRootEvents();
    }

    /**
     * {@inheritDoc}
     */
    public function getInactionBasedEvents(): \Doctrine\Common\Collections\ArrayCollection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInactionBasedEvents', []);

        return parent::getInactionBasedEvents();
    }

    /**
     * {@inheritDoc}
     */
    public function getEventsByType($type): \Doctrine\Common\Collections\ArrayCollection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventsByType', [$type]);

        return parent::getEventsByType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmailSendEvents(): \Doctrine\Common\Collections\ArrayCollection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmailSendEvents', []);

        return parent::getEmailSendEvents();
    }

    /**
     * {@inheritDoc}
     */
    public function isEmailCampaign(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEmailCampaign', []);

        return parent::isEmailCampaign();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublishUp($publishUp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublishUp', [$publishUp]);

        return parent::setPublishUp($publishUp);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublishUp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublishUp', []);

        return parent::getPublishUp();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublishDown($publishDown)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublishDown', [$publishDown]);

        return parent::setPublishDown($publishDown);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublishDown()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublishDown', []);

        return parent::getPublishDown();
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory($category): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', [$category]);

        parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function addLead($key, \Mautic\CampaignBundle\Entity\Lead $lead)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLead', [$key, $lead]);

        return parent::addLead($key, $lead);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLead(\Mautic\CampaignBundle\Entity\Lead $lead): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLead', [$lead]);

        parent::removeLead($lead);
    }

    /**
     * {@inheritDoc}
     */
    public function getLeads()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeads', []);

        return parent::getLeads();
    }

    /**
     * {@inheritDoc}
     */
    public function getLists()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLists', []);

        return parent::getLists();
    }

    /**
     * {@inheritDoc}
     */
    public function addList(\Mautic\LeadBundle\Entity\LeadList $list)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addList', [$list]);

        return parent::addList($list);
    }

    /**
     * {@inheritDoc}
     */
    public function removeList(\Mautic\LeadBundle\Entity\LeadList $list): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeList', [$list]);

        parent::removeList($list);
    }

    /**
     * {@inheritDoc}
     */
    public function getForms()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getForms', []);

        return parent::getForms();
    }

    /**
     * {@inheritDoc}
     */
    public function addForm(\Mautic\FormBundle\Entity\Form $form)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addForm', [$form]);

        return parent::addForm($form);
    }

    /**
     * {@inheritDoc}
     */
    public function removeForm(\Mautic\FormBundle\Entity\Form $form): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeForm', [$form]);

        parent::removeForm($form);
    }

    /**
     * {@inheritDoc}
     */
    public function getCanvasSettings()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCanvasSettings', []);

        return parent::getCanvasSettings();
    }

    /**
     * {@inheritDoc}
     */
    public function setCanvasSettings(array $canvasSettings): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCanvasSettings', [$canvasSettings]);

        parent::setCanvasSettings($canvasSettings);
    }

    /**
     * {@inheritDoc}
     */
    public function getAllowRestart(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllowRestart', []);

        return parent::getAllowRestart();
    }

    /**
     * {@inheritDoc}
     */
    public function allowRestart(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'allowRestart', []);

        return parent::allowRestart();
    }

    /**
     * {@inheritDoc}
     */
    public function setAllowRestart($allowRestart)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAllowRestart', [$allowRestart]);

        return parent::setAllowRestart($allowRestart);
    }

    /**
     * {@inheritDoc}
     */
    public function setDeleted(?\DateTimeInterface $deleted): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeleted', [$deleted]);

        parent::setDeleted($deleted);
    }

    /**
     * {@inheritDoc}
     */
    public function isDeleted(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDeleted', []);

        return parent::isDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function getContactMembership(\Mautic\LeadBundle\Entity\Lead $contact)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContactMembership', [$contact]);

        return parent::getContactMembership($contact);
    }

    /**
     * {@inheritDoc}
     */
    public function getOnclickMethod(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOnclickMethod', []);

        return parent::getOnclickMethod();
    }

    /**
     * {@inheritDoc}
     */
    public function getDataAttributes(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDataAttributes', []);

        return parent::getDataAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslationKeysDataAttributes(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslationKeysDataAttributes', []);

        return parent::getTranslationKeysDataAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function isPublished($checkPublishStatus = true, $checkCategoryStatus = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPublished', [$checkPublishStatus, $checkCategoryStatus]);

        return parent::isPublished($checkPublishStatus, $checkCategoryStatus);
    }

    /**
     * {@inheritDoc}
     */
    public function setDateAdded($dateAdded)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateAdded', [$dateAdded]);

        return parent::setDateAdded($dateAdded);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateAdded()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateAdded', []);

        return parent::getDateAdded();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateModified($dateModified)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateModified', [$dateModified]);

        return parent::setDateModified($dateModified);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateModified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateModified', []);

        return parent::getDateModified();
    }

    /**
     * {@inheritDoc}
     */
    public function setCheckedOut($checkedOut)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCheckedOut', [$checkedOut]);

        return parent::setCheckedOut($checkedOut);
    }

    /**
     * {@inheritDoc}
     */
    public function getCheckedOut()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCheckedOut', []);

        return parent::getCheckedOut();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedBy($createdBy = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedBy', [$createdBy]);

        return parent::setCreatedBy($createdBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedBy', []);

        return parent::getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setModifiedBy($modifiedBy = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModifiedBy', [$modifiedBy]);

        return parent::setModifiedBy($modifiedBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getModifiedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModifiedBy', []);

        return parent::getModifiedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setCheckedOutBy($checkedOutBy = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCheckedOutBy', [$checkedOutBy]);

        return parent::setCheckedOutBy($checkedOutBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getCheckedOutBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCheckedOutBy', []);

        return parent::getCheckedOutBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsPublished($isPublished)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsPublished', [$isPublished]);

        return parent::setIsPublished($isPublished);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsPublished()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsPublished', []);

        return parent::getIsPublished();
    }

    /**
     * {@inheritDoc}
     */
    public function getPublishStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublishStatus', []);

        return parent::getPublishStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function isNew()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isNew', []);

        return parent::isNew();
    }

    /**
     * {@inheritDoc}
     */
    public function setNew(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNew', []);

        parent::setNew();
    }

    /**
     * {@inheritDoc}
     */
    public function getCheckedOutByUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCheckedOutByUser', []);

        return parent::getCheckedOutByUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedByUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedByUser', []);

        return parent::getCreatedByUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getModifiedByUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModifiedByUser', []);

        return parent::getModifiedByUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedByUser($createdByUser)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedByUser', [$createdByUser]);

        return parent::setCreatedByUser($createdByUser);
    }

    /**
     * {@inheritDoc}
     */
    public function setModifiedByUser($modifiedByUser)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModifiedByUser', [$modifiedByUser]);

        return parent::setModifiedByUser($modifiedByUser);
    }

    /**
     * {@inheritDoc}
     */
    public function setCheckedOutByUser($checkedOutByUser)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCheckedOutByUser', [$checkedOutByUser]);

        return parent::setCheckedOutByUser($checkedOutByUser);
    }

    /**
     * {@inheritDoc}
     */
    public function __call($name, $arguments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', [$name, $arguments]);

        return parent::__call($name, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getChanges($includePast = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChanges', [$includePast]);

        return parent::getChanges($includePast);
    }

    /**
     * {@inheritDoc}
     */
    public function resetChanges(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'resetChanges', []);

        parent::resetChanges();
    }

    /**
     * {@inheritDoc}
     */
    public function setChanges(array $changes): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChanges', [$changes]);

        parent::setChanges($changes);
    }

    /**
     * {@inheritDoc}
     */
    public function getVersion(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersion', []);

        return parent::getVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function setVersion(int $version): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVersion', [$version]);

        parent::setVersion($version);
    }

    /**
     * {@inheritDoc}
     */
    public function isMarkedForVersionIncrement(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isMarkedForVersionIncrement', []);

        return parent::isMarkedForVersionIncrement();
    }

    /**
     * {@inheritDoc}
     */
    public function markForVersionIncrement(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'markForVersionIncrement', []);

        parent::markForVersionIncrement();
    }

    /**
     * {@inheritDoc}
     */
    public function getVersionField(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersionField', []);

        return parent::getVersionField();
    }

}
