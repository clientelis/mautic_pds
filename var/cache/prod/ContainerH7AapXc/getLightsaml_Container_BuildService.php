<?php

namespace ContainerH7AapXc;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getLightsaml_Container_BuildService extends AppKernelProdContainer
{
    /*
     * Gets the public 'lightsaml.container.build' shared service.
     *
     * @return \LightSaml\SymfonyBridgeBundle\Bridge\Container\BuildContainer
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->privates['lightsaml.container.store'] ?? $container->load('getLightsaml_Container_StoreService'));

        if (isset($container->services['lightsaml.container.build'])) {
            return $container->services['lightsaml.container.build'];
        }
        $b = ($container->services['router'] ?? $container->getRouterService());

        if (isset($container->services['lightsaml.container.build'])) {
            return $container->services['lightsaml.container.build'];
        }
        $c = ($container->privates['lightsaml.system.time_provider'] ?? ($container->privates['lightsaml.system.time_provider'] = new \LightSaml\Provider\TimeProvider\SystemTimeProvider()));
        $d = new \Symfony\Component\EventDispatcher\EventDispatcher();
        $e = new \LightSaml\Validator\Model\NameId\NameIdValidator();
        $f = $container->load('getLightsaml_Service_CredentialResolverService');
        $g = new \LightSaml\Resolver\Endpoint\CompositeEndpointResolver();
        $g->add(new \LightSaml\Resolver\Endpoint\BindingEndpointResolver());
        $g->add(new \LightSaml\Resolver\Endpoint\DescriptorTypeEndpointResolver());
        $g->add(new \LightSaml\Resolver\Endpoint\ServiceTypeEndpointResolver());
        $g->add(new \LightSaml\Resolver\Endpoint\IndexEndpointResolver());
        $g->add(new \LightSaml\Resolver\Endpoint\LocationEndpointResolver());
        $h = ($container->privates['lightsaml.own.credential_store'] ?? $container->load('getLightsaml_Own_CredentialStoreService'));

        return $container->services['lightsaml.container.build'] = new \LightSaml\SymfonyBridgeBundle\Bridge\Container\BuildContainer(new \LightSaml\SymfonyBridgeBundle\Bridge\Container\SystemContainer(($container->services['request_stack'] ?? ($container->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($container->services['.container.private.session'] ?? $container->get_Container_Private_SessionService()), $c, $d, new \Psr\Log\NullLogger()), ($container->privates['lightsaml.container.party'] ?? $container->load('getLightsaml_Container_PartyService')), $a, new \LightSaml\SymfonyBridgeBundle\Bridge\Container\ProviderContainer(new \LightSaml\Provider\Attribute\FixedAttributeValueProvider(), new \LightSaml\Provider\Session\FixedSessionInfoProvider(), new \LightSaml\Provider\NameID\FixedNameIdProvider()), new \LightSaml\SymfonyBridgeBundle\Bridge\Container\CredentialContainer(($container->privates['lightsaml.credential.credential_store'] ?? $container->load('getLightsaml_Credential_CredentialStoreService'))), new \LightSaml\SymfonyBridgeBundle\Bridge\Container\ServiceContainer(new \LightSaml\Validator\Model\Assertion\AssertionValidator($e, new \LightSaml\Validator\Model\Subject\SubjectValidator($e), new \LightSaml\Validator\Model\Statement\StatementValidator()), new \LightSaml\Validator\Model\Assertion\AssertionTimeValidator(), new \LightSaml\Resolver\Signature\OwnSignatureResolver($f), $g, $e, new \LightSaml\Binding\BindingFactory($d), new \LightSaml\Validator\Model\Signature\SignatureValidator($f), $f, new \LightSaml\Resolver\Session\SessionProcessor(($container->privates['lightsaml.store.sso_state'] ?? $container->load('getLightsaml_Store_SsoStateService')), $c)), new \LightSaml\SymfonyBridgeBundle\Bridge\Container\OwnContainer(\LightSaml\SymfonyBridgeBundle\Factory\OwnEntityDescriptorProviderFactory::build($container->getEnv('MAUTIC_SAML_ENTITY_ID'), $b, 'lightsaml_sp.login_check', NULL, $h), $h, $container->getEnv('MAUTIC_SAML_ENTITY_ID')));
    }
}
